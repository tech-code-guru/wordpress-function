<?php
/**
 * Twenty Nineteen functions and definitions
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 *
 * @package WordPress
 * @subpackage Twenty_Nineteen
 * @since 1.0.0
 */

/**
 * Twenty Nineteen only works in WordPress 4.7 or later.
 */
if ( version_compare( $GLOBALS['wp_version'], '4.7', '<' ) ) {
	require get_template_directory() . '/inc/back-compat.php';
	return;
}

if ( ! function_exists( 'twentynineteen_setup' ) ) :
	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 *
	 * Note that this function is hooked into the after_setup_theme hook, which
	 * runs before the init hook. The init hook is too late for some features, such
	 * as indicating support for post thumbnails.
	 */
	function twentynineteen_setup() {
		/*
		 * Make theme available for translation.
		 * Translations can be filed in the /languages/ directory.
		 * If you're building a theme based on Twenty Nineteen, use a find and replace
		 * to change 'twentynineteen' to the name of your theme in all the template files.
		 */
		load_theme_textdomain( 'twentynineteen', get_template_directory() . '/languages' );

		// Add default posts and comments RSS feed links to head.
		add_theme_support( 'automatic-feed-links' );

		/*
		 * Let WordPress manage the document title.
		 * By adding theme support, we declare that this theme does not use a
		 * hard-coded <title> tag in the document head, and expect WordPress to
		 * provide it for us.
		 */
		add_theme_support( 'title-tag' );

		/*
		 * Enable support for Post Thumbnails on posts and pages.
		 *
		 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
		 */
		add_theme_support( 'post-thumbnails' );
		set_post_thumbnail_size( 1568, 9999 );

		// This theme uses wp_nav_menu() in two locations.
		register_nav_menus(
			array(
				'menu-1' => __( 'Primary', 'twentynineteen' ),
				'footer' => __( 'Footer Menu', 'twentynineteen' ),
				'social' => __( 'Social Links Menu', 'twentynineteen' ),
			)
		);

		/*
		 * Switch default core markup for search form, comment form, and comments
		 * to output valid HTML5.
		 */
		add_theme_support(
			'html5',
			array(
				'search-form',
				'comment-form',
				'comment-list',
				'gallery',
				'caption',
			)
		);

		/**
		 * Add support for core custom logo.
		 *
		 * @link https://codex.wordpress.org/Theme_Logo
		 */
		add_theme_support(
			'custom-logo',
			array(
				'height'      => 190,
				'width'       => 190,
				'flex-width'  => false,
				'flex-height' => false,
			)
		);

		// Add theme support for selective refresh for widgets.
		add_theme_support( 'customize-selective-refresh-widgets' );

		// Add support for Block Styles.
		add_theme_support( 'wp-block-styles' );

		// Add support for full and wide align images.
		add_theme_support( 'align-wide' );

		// Add support for editor styles.
		add_theme_support( 'editor-styles' );

		// Enqueue editor styles.
		add_editor_style( 'style-editor.css' );

		// Add custom editor font sizes.
		add_theme_support(
			'editor-font-sizes',
			array(
				array(
					'name'      => __( 'Small', 'twentynineteen' ),
					'shortName' => __( 'S', 'twentynineteen' ),
					'size'      => 19.5,
					'slug'      => 'small',
				),
				array(
					'name'      => __( 'Normal', 'twentynineteen' ),
					'shortName' => __( 'M', 'twentynineteen' ),
					'size'      => 22,
					'slug'      => 'normal',
				),
				array(
					'name'      => __( 'Large', 'twentynineteen' ),
					'shortName' => __( 'L', 'twentynineteen' ),
					'size'      => 36.5,
					'slug'      => 'large',
				),
				array(
					'name'      => __( 'Huge', 'twentynineteen' ),
					'shortName' => __( 'XL', 'twentynineteen' ),
					'size'      => 49.5,
					'slug'      => 'huge',
				),
			)
		);

		// Editor color palette.
		add_theme_support(
			'editor-color-palette',
			array(
				array(
					'name'  => __( 'Primary', 'twentynineteen' ),
					'slug'  => 'primary',
					'color' => twentynineteen_hsl_hex( 'default' === get_theme_mod( 'primary_color' ) ? 199 : get_theme_mod( 'primary_color_hue', 199 ), 100, 33 ),
				),
				array(
					'name'  => __( 'Secondary', 'twentynineteen' ),
					'slug'  => 'secondary',
					'color' => twentynineteen_hsl_hex( 'default' === get_theme_mod( 'primary_color' ) ? 199 : get_theme_mod( 'primary_color_hue', 199 ), 100, 23 ),
				),
				array(
					'name'  => __( 'Dark Gray', 'twentynineteen' ),
					'slug'  => 'dark-gray',
					'color' => '#111',
				),
				array(
					'name'  => __( 'Light Gray', 'twentynineteen' ),
					'slug'  => 'light-gray',
					'color' => '#767676',
				),
				array(
					'name'  => __( 'White', 'twentynineteen' ),
					'slug'  => 'white',
					'color' => '#FFF',
				),
			)
		);

		// Add support for responsive embedded content.
		add_theme_support( 'responsive-embeds' );
	}
endif;
add_action( 'after_setup_theme', 'twentynineteen_setup' );

/**
 * Register widget area.
 *
 * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
 */
function twentynineteen_widgets_init() {

	register_sidebar(
		array(
			'name'          => __( 'Footer', 'twentynineteen' ),
			'id'            => 'sidebar-1',
			'description'   => __( 'Add widgets here to appear in your footer.', 'twentynineteen' ),
			'before_widget' => '<section id="%1$s" class="widget %2$s">',
			'after_widget'  => '</section>',
			'before_title'  => '<h2 class="widget-title">',
			'after_title'   => '</h2>',
		)
	);

}
add_action( 'widgets_init', 'twentynineteen_widgets_init' );

/**
 * Set the content width in pixels, based on the theme's design and stylesheet.
 *
 * Priority 0 to make it available to lower priority callbacks.
 *
 * @global int $content_width Content width.
 */
function twentynineteen_content_width() {
	// This variable is intended to be overruled from themes.
	// Open WPCS issue: {@link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1043}.
	// phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound
	$GLOBALS['content_width'] = apply_filters( 'twentynineteen_content_width', 640 );
}
add_action( 'after_setup_theme', 'twentynineteen_content_width', 0 );

/**
 * Enqueue scripts and styles.
 */
function twentynineteen_scripts() {
	wp_enqueue_style( 'twentynineteen-style', get_stylesheet_uri(), array(), wp_get_theme()->get( 'Version' ) );

	wp_style_add_data( 'twentynineteen-style', 'rtl', 'replace' );

	if ( has_nav_menu( 'menu-1' ) ) {
		wp_enqueue_script( 'twentynineteen-priority-menu', get_theme_file_uri( '/js/priority-menu.js' ), array(), '1.1', true );
		wp_enqueue_script( 'twentynineteen-touch-navigation', get_theme_file_uri( '/js/touch-keyboard-navigation.js' ), array(), '1.1', true );
	}

	wp_enqueue_style( 'twentynineteen-print-style', get_template_directory_uri() . '/print.css', array(), wp_get_theme()->get( 'Version' ), 'print' );

	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
		wp_enqueue_script( 'comment-reply' );
	}
}
add_action( 'wp_enqueue_scripts', 'twentynineteen_scripts' );

/**
 * Fix skip link focus in IE11.
 *
 * This does not enqueue the script because it is tiny and because it is only for IE11,
 * thus it does not warrant having an entire dedicated blocking script being loaded.
 *
 * @link https://git.io/vWdr2
 */
function twentynineteen_skip_link_focus_fix() {
	// The following is minified via `terser --compress --mangle -- js/skip-link-focus-fix.js`.
	?>
	<script>
	/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){var t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())},!1);
	</script>
	<?php
}
add_action( 'wp_print_footer_scripts', 'twentynineteen_skip_link_focus_fix' );

/**
 * Enqueue supplemental block editor styles.
 */
function twentynineteen_editor_customizer_styles() {

	wp_enqueue_style( 'twentynineteen-editor-customizer-styles', get_theme_file_uri( '/style-editor-customizer.css' ), false, '1.1', 'all' );

	if ( 'custom' === get_theme_mod( 'primary_color' ) ) {
		// Include color patterns.
		require_once get_parent_theme_file_path( '/inc/color-patterns.php' );
		wp_add_inline_style( 'twentynineteen-editor-customizer-styles', twentynineteen_custom_colors_css() );
	}
}
add_action( 'enqueue_block_editor_assets', 'twentynineteen_editor_customizer_styles' );

/**
 * Display custom color CSS in customizer and on frontend.
 */
function twentynineteen_colors_css_wrap() {

	// Only include custom colors in customizer or frontend.
	if ( ( ! is_customize_preview() && 'default' === get_theme_mod( 'primary_color', 'default' ) ) || is_admin() ) {
		return;
	}

	require_once get_parent_theme_file_path( '/inc/color-patterns.php' );

	$primary_color = 199;
	if ( 'default' !== get_theme_mod( 'primary_color', 'default' ) ) {
		$primary_color = get_theme_mod( 'primary_color_hue', 199 );
	}
	?>

	<style type="text/css" id="custom-theme-colors" <?php echo is_customize_preview() ? 'data-hue="' . absint( $primary_color ) . '"' : ''; ?>>
		<?php echo twentynineteen_custom_colors_css(); ?>
	</style>
	<?php
}
add_action( 'wp_head', 'twentynineteen_colors_css_wrap' );

/**
 * SVG Icons class.
 */
require get_template_directory() . '/classes/class-twentynineteen-svg-icons.php';

/**
 * Custom Comment Walker template.
 */
require get_template_directory() . '/classes/class-twentynineteen-walker-comment.php';

/**
 * Enhance the theme by hooking into WordPress.
 */
require get_template_directory() . '/inc/template-functions.php';


function use_gd_editor($array) {
return array( ‘WP_Image_Editor_GD’, );
}
add_filter( ‘wp_image_editors’, ‘use_gd_editor’ );

/**
 * SVG Icons related functions.
 */
require get_template_directory() . '/inc/icon-functions.php';

/**
 * Custom template tags for the theme.
 */
require get_template_directory() . '/inc/template-tags.php';

/**
 * Customizer additions.
 */
require get_template_directory() . '/inc/customizer.php';
function mytheme_customjs_scripts() {
//wp_enqueue_script( 'mytheme-jqueryjs', get_template_directory_uri() . '/js/jquery.min.js', array(), '', true );
wp_enqueue_script( 'mytheme-owljs', get_template_directory_uri() . '/js/owl.carousel.js', array(), '', true );
wp_enqueue_style( 'mytheme-owlcss', get_template_directory_uri().'/css/owl.carousel.css');
wp_enqueue_style( 'mytheme-custom', get_template_directory_uri().'/css/custom.css');

	wp_enqueue_script( 'mytheme-customjs', get_template_directory_uri() . '/js/custom.js', array(), '', true );
}
add_action( 'wp_enqueue_scripts', 'mytheme_customjs_scripts' );

add_filter( ‘big_image_size_threshold’, ‘__return_false’ );



/* Ajax Function */

function models_func() { 

$data=$_POST['data'];
$model_id=$data['model_id'];
$model_type=$data['model_type'];
$lpost_id = $model_id;
 
	?>
 <div class="data">
  <div class="customComparisonPage__compareMillingMachineModels__mainImg">

	<?php if (has_post_thumbnail( $lpost_id ) ):
		$image = wp_get_attachment_image_src( get_post_thumbnail_id( $lpost_id ), 'single-post-thumbnail' ); 
		$machine_page=get_field('machine_page', $lpost_id );
	//echo '<br>';
	//print_r($machine_page->ID);
	$machine_page_link=$machine_page->ID;
	?>
		<img src="<?php echo $image[0]; ?>">
 
	<?php endif; ?>

    </div><a class="customComparisonPage__basicBtn" href="<?php echo get_permalink($machine_page_link); ?>">Learn More <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 11.18 19.75" style="enable-background:new 0 0 11.18 19.75;" xml:space="preserve"> <style type="text/css">st0{fill:none;stroke:#F39F00;stroke-width:3.448;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}</style><polyline class="st0" points="1.85,1.83 9.33,9.88 1.85,17.92 "></polyline></svg></a>
    <hr class="customComparisonPage__compareMillingMachineModels__divider">

  
 
<ul class="customComparisonPage__compareMillingMachineModels__compareList text-center">
	<li><span class="big--text"><?php echo get_post_meta($lpost_id, 'axies', true); ?></span> Axis</li>
	<li>Max <span class="big--text"><?php echo number_format(get_post_meta($lpost_id, 'rpm', true)); ?></span> <span class="middium--text">RPM</span></li>
<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'spindle_power_type', true); ?> <?php echo get_post_meta($lpost_id, 'spindle_power', true); ?>kw</span> Spindle Power</li>	<li><span class="big--text"><?php echo get_post_meta($lpost_id, 'atc', true); ?></span> A.T.C</li>
	<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'tool_shankmm', true); ?>mm</span>Tool Shank</li>
	<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'motor', true); ?></span>Motor</li>
	<?php /*<li><span class="big--text element--block"><?php echo implode(',', get_post_meta($lpost_id, 'processing', true)); ?></span>Processing</li>*/ ?>
	<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'drive_mechanism', true); ?></span>Drive Mechanism</li>
	<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'way_system', true); ?></span>Way System</li>
	<?php /*<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'travel__xyz_axis', true); ?></span>Travel X,Y,Z axis</li>
	<li><span class="big--text element--block"><?php echo get_post_meta($lpost_id, 'travel_a__b_axis', true); ?></span>Travel A / B axis</li>
		*/ ?>
	<?php  
 
	//echo '<pre>';
	//print_r($disk_jig_or_cartridge_type);

	?>
	
	<li><span class="big--text element--block">
		<?php 
					if(get_post_meta($lpost_id, 'disk_jig_or_cartridge_type', true)){
					echo implode(',', get_post_meta($lpost_id, 'disk_jig_or_cartridge_type', true)); 

					} else {

						echo '-';
					}
					?>
	</span>Cartridge</li>
	<?php /*<li><span class="big--text element--block">
	<?php if(get_post_meta($lpost_id, 'number_of_jig', true)): echo  get_post_meta($lpost_id, 'number_of_jig', true); else: echo '-'; endif; ?></span>Number of Jig</li>
	<li><span class="big--text element--block">
	<?php if(get_post_meta($lpost_id, 'jig_exchange', true)):  echo get_post_meta($lpost_id, 'jig_exchange', true); else: echo  '-'; endif; ?></span>Jig exchange</li>
	*/ ?>

</ul>

<h3>Size &amp; Weight</h3> 
<ul class="customComparisonPage__compareMillingMachineModels__compareList compareList--withBoldText">
<li><?php echo get_post_meta($lpost_id, 'total_size_w*d*h', true); ?><span class="small--text--28 element--block"></span></li>

<li><?php echo get_post_meta($lpost_id, 'weight_machine__table', true); ?><span class="small--text--23 element--block">Machine | Table</span></li>
</ul>


    
				<h3>Materials</h3>
				<ul class="customComparisonPage__compareMillingMachineModels__compareList text-center compareList--withBoldText">
					<?php echo data_exists($lpost_id,'pre-milled_blank_titanium','Pre-milled Blank (Titanium)'); ?>
					<?php echo data_exists($lpost_id,'co-cr_&_ni-cr_disk','Co-Cr & Ni-Cr Disk'); ?>
					<?php echo data_exists($lpost_id,'titanium_disk','Titanium Disk'); ?>
					<?php echo data_exists($lpost_id,'lithium_disilicate','Lithium Disilicat'); ?>
					<?php echo data_exists($lpost_id,'nanocomposite','Nanocomposite'); ?>
					<?php echo data_exists($lpost_id,'zirconia','Zirconia'); ?>
					<?php echo data_exists($lpost_id,'pmma','Pmma'); ?>
					<?php echo data_exists($lpost_id,'peek','Peek'); ?>
					<?php echo data_exists($lpost_id,'wax','Wax'); ?>
				</ul> 

				<h3>Applications</h3>
				<ul class="customComparisonPage__compareMillingMachineModels__compareList text-center compareList--withBoldText">
					<?php echo data_exists($lpost_id,'implant_bar','Implant Bar'); ?>
					<?php echo data_exists($lpost_id,'screw-retained_bridge','Screw-Retained Bridge'); ?>
					<?php echo data_exists($lpost_id,'customized_abutment','Customized Abutment'); ?>
					<?php echo data_exists($lpost_id,'lithium_disilicate','Lithium Disilicat'); ?>
					<?php echo data_exists($lpost_id,'hybrid_abutment','Hybrid Abutment'); ?>
					<?php echo data_exists($lpost_id,'inlay_&_onlay','Inlay & Onlay'); ?>
					<?php echo data_exists($lpost_id,'crown_&_coping','Crown & Coping'); ?>
					<?php echo data_exists($lpost_id,'crown_&_coping_bridge','Crown & Coping Bridge'); ?>
					<?php echo data_exists($lpost_id,'model','Model'); ?>
					<?php echo data_exists($lpost_id,'bite_splint','Bite Splint'); ?>
					<?php echo data_exists($lpost_id,'denture','Denture'); ?>
				</ul>
</div> 
<?php 
	//echo 'reched';
	die();
}

add_action("wp_ajax_get_models", "models_func");
add_action("wp_ajax_nopriv_get_models", "models_func");



/* custom function */

function materials_func($lpost_id, $key) {

$val= get_post_meta($lpost_id, $key, true);

if($val == 1) {
	$data='◎';

} elseif ($val == 2) {

	$data='○';

} elseif ($val == 3) {

	$data='○(T Jig X)';

} elseif ($val == 4) {

	$data='◎(T Jig X)';

} elseif ($val == 5) {

	$data='◎(T Jig ○)';

} elseif ($val == 6) {

	$data='○(T Jig X)';

} elseif ($val == 7) {

	$data='◎(T Jig ◎)';

} else {

	$data='X';
 
}

return $data;

} 

/* loop */ 
function model_data($key,$val) {

		$args = array(
		'post_type'  => 'arum_machine',
		'post_status' => 'publish',
		'order'    => 'ASC',
		'posts_per_page' => 30
		);

		$result = new WP_Query( $args );
				$limit=1;
		if ( $result-> have_posts() ) : 
		while ( $result->have_posts() ) : $result->the_post();
		$lpost_id=get_the_ID();

		$get_data=get_post_meta($lpost_id, $key, true);
		 if($limit <= 5 ): 

		  /* post meta key based conditions */
		 if($key == "spindle_power") {

		 	 echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'spindle_power_type', true).'&nbsp'.$get_data.'kw</td>';


		 }	else if ($key == "axies") {

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.'Axis</td>';
 

		 } else if ($key == "atc") {

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.$val.'</td>';
 

		 }  else if ($key == "rpm") {

			echo '<td data-key="'.$key.'">'.number_format($get_data).'&nbsp'.$val.'</td>';
 

		 }  else if ($key == "processing" || $key == "disk_jig_or_cartridge_type") {  


				if($get_data){

			echo '<td data-key="'.$key.'">'.implode(',', get_post_meta($lpost_id, $key, true)).'&nbsp'.$val.'</td>';
			} else {

			 	echo '<td data-key="'.$key.'">-</td>';

			} 
 
 
 
		 }  else if ($key == "number_of_jig") {

			if(get_post_meta($lpost_id, 'number_of_jig', true)): 

				echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'number_of_jig', true).'</td>';

			 else: 
			 	
			 	echo '<td data-key="'.$key.'">-</td>';

			 endif; 
 

		 } else if ($key == "jig_exchange") {

			if(get_post_meta($lpost_id, 'jig_exchange', true)): 

				echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'jig_exchange', true).'</td>';

			 else: 

			 	echo '<td data-key="'.$key.'">-</td>';

			 endif;
 

		 } else {

		if($get_data) {

			if(is_numeric($get_data)) { 

				echo '<td data-key="'.$key.'">'.materials_func($lpost_id, $key).'&nbsp'.$val.'</td>';


			} else { 

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.$val.'</td>';

			} 

		} else {

				echo '<td data-key="'.$key.'">X</td>';

		}
  
		 	

		}  

		/* ///END post meta key based conditions */

			endif;	
				$limit++;			
         endwhile;
		 endif; 
		wp_reset_postdata();
}

function rmodel_data($key,$val) {

		$args = array(
		'post_type'  => 'arum_machine',
		'post_status' => 'publish',
		'order'    => 'ASC',
		'posts_per_page' => 30
		);

		$result = new WP_Query( $args );
		$limit=1;
		if ( $result-> have_posts() ) : 
		while ( $result->have_posts() ) : $result->the_post();
		$lpost_id=get_the_ID();

		$get_data=get_post_meta($lpost_id, $key, true);

		 if($limit > 5 ): 

  		/* post meta key based conditions */
		 if($key == "spindle_power") {

		 	 echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'spindle_power_type', true).'&nbsp'.$get_data.'kw</td>';

 
		 }	else if ($key == "axies") {

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.'Axis</td>';
 

		 } else if ($key == "atc") {

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.$val.'</td>';
 

		 }  else if ($key == "rpm") {

			echo '<td data-key="'.$key.'">'.number_format($get_data).'&nbsp'.$val.'</td>';
 

		 } else if ($key == "processing" || $key == "disk_jig_or_cartridge_type") {  


				if($get_data){

			echo '<td data-key="'.$key.'">'.implode(',', get_post_meta($lpost_id, $key, true)).'&nbsp'.$val.'</td>';
			} else {

			 	echo '<td data-key="'.$key.'">-</td>';

			} 

 
 
		 } else if ($key == "number_of_jig") {

			if(get_post_meta($lpost_id, 'number_of_jig', true)): 

				echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'number_of_jig', true).'</td>';

			 else: 
			 	
			 	echo '<td data-key="'.$key.'">-</td>';

			 endif; 
 

		 } else if ($key == "jig_exchange") {

			if(get_post_meta($lpost_id, 'jig_exchange', true)): 

				echo '<td data-key="'.$key.'">'.get_post_meta($lpost_id, 'jig_exchange', true).'</td>';

			 else: 

			 	echo '<td data-key="'.$key.'">-</td>';

			 endif;
 

		 } else {

		if($get_data) { 

			if(is_numeric($get_data)) { 

				echo '<td data-key="'.$key.'">'.materials_func($lpost_id, $key).'&nbsp'.$val.'</td>';


			} else { 

			echo '<td data-key="'.$key.'">'.$get_data.'&nbsp'.$val.'</td>';

			} 

		} else {

				echo '<td data-key="'.$key.'">X</td>';

		}
  
 
		 	
 
		}  

		/* ///END post meta key based conditions */


				endif;	
				$limit++;			
         endwhile;
		 endif; 
		wp_reset_postdata();
}
 
function search_func() { 

	$data=$_POST['data']; 

	$fields=$_POST['fields']; 

	
	// materials arrya data	
	foreach ($fields as $key => $value) {
	$array_val[]=$value['value'];
	}

	// materials  data	
	if (in_array("Pre-milled Blank", $array_val)) {

	$premilled_blank=array (
       'key'     => 'pre-milled_blank_titanium',
       'value'   => 'ea',
       'compare' => 'LIKE'
     );

	}


	if (in_array("Titanium Disk", $array_val)) {

	$titanium_disk=array (
       'key'     => 'titanium_disk',
       'value' => [1, 2],
       'compare' => 'IN'
     );

	}


	if (in_array("Co-Cr & Ni-Cr Disk", $array_val)) {
		$Ni_Cr_Disk=array (
       'key'     => 'co-cr_&_ni-cr_disk',
       'value' => [1, 2],
       'compare' => 'IN'
     );

	}

	if (in_array("Lithium Disilicate", $array_val)) {
		$lithium_disilicate=array (
       'key'     => 'lithium_disilicate',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}

	if (in_array("Nanocomposite", $array_val)) {
		$nanocomposite=array (
       'key'     => 'Nanocomposite',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );

	}

	if (in_array("Zirconia", $array_val)) {
		$zirconia=array (
       'key'     => 'zirconia',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );

	}


	if (in_array("PMMA", $array_val)) {
			$pmma=array (
       'key'     => 'pmma',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}

	if (in_array("PEEK", $array_val)) {
			$peek=array (
       'key'     => 'peek',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}

	if (in_array("Wax", $array_val)) {
			$wax=array (
       'key'     => 'wax',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}

	// Applications  data	

	if (in_array("Implant Bar", $array_val)) {
			$implant_bar=array (
       'key'     => 'implant_bar',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}

if (in_array("Screw-Retained Bridge", $array_val)) {
			$screwretained_bridge=array (
       'key'     => 'screw-retained_bridge',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}


if (in_array("Customized Abutment", $array_val)) {
			$customized_abutment=array (
       'key'     => 'customized_abutment',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}



if (in_array("Hybrid Abutmen", $array_val)) {
			$hybrid_abutment=array (
       'key'     => 'hybrid_abutment',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}




if (in_array("Inlay & Onlay", $array_val)) {
			$Inlay_Onlay=array (
       'key'     => 'inlay_&_onlay',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}




if (in_array("Crown & Coping", $array_val)) {
			$crown_coping=array (
       'key'     => 'crown_&_coping',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}




if (in_array("Crown & Coping Bridge", $array_val)) {
			$crown_coping_bridge=array (
       'key'     => 'crown_&_coping_bridge',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}




if (in_array("Model", $array_val)) {
			$model=array (
       'key'     => 'model',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}



if (in_array("Bite Splint", $array_val)) {
			$bite_splint=array (
       'key'     => 'bite_splint',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}


if (in_array("Denture", $array_val)) {
			$denture=array (
       'key'     => 'denture',
       'value' => [1, 2, 3, 4, 5],
       'compare' => 'IN'
     );
	}



	$search_key=$_POST['search_key'];


	$click_axis=$data['click_axis'];
	$click_processing=$data['click_processing'];
	$click_motor=$data['click_motor'];
	$click_disk_type=$data['click_disk_type'];

	$click_kw=$data['click_kw'];

 	$click_materials=$data['click_materials'];
	$click_applications=$data['click_applications'];



	//echo '<pre>';
	//print_r($click_applications); 
 
  
  	function check_data($key,$val,$compare='LIKE') {
			if($val){
	    	$val=array(
				'key'       => $key,
				'value'     => $val,
			    'compare'   => $compare
			);
		}
		return $val;
  	}   

  	$click_axis=check_data('axies',$click_axis);
  	$click_processing=check_data('processing',$click_processing);
  	$click_motor=check_data('motor',$click_motor);
  	$click_disk_type=check_data('disk_jig_or_cartridge_type',$click_disk_type);

  	//echo '<pre>===click_disk_type';
  	//print_r($click_disk_type);

  	if($click_kw =="AC"){

	$click_kw=1;

	if($click_kw){

	$click_kw=array(
	'key'  => 'spindle_power',
	'value' => $click_kw,
    'compare' => '<',
	);

	}  

  	} else if($click_kw =="DC") {

  	$click_kw=1;

  	if($click_kw){

	$click_kw=array(
	'key'  => 'spindle_power',
	'value' => '',
    'compare' => 'LIKE',
	);

	}  

  	} else {   

  		$click_kw='';
  	}
 
	//echo '<pre>';
	//print_r($click_kw);
 /*
	$click_materials=array(
	'key'       => 'pre-milled_blank_titanium',
	'value' => '',
	'compare' => 'LIKE'
    );
*/
	
 
	/*
		'key'  => 'spindle_power',
	'value' => '',
    'compare' => 'LIKE',
    */
	?>

      <ul class="customComparisonPage__maniBanner__searchSelectedProducts herereched" style="">

      <?php
     if($search_key) {
	$args = array(
	'post_type'  => 'arum_machine',
	'post_status' => 'publish',
	'order'    => 'ASC',
	's' => $search_key, 
	'posts_per_page' => 30
	); 

  
     } else {

	$query_args = array(
    'post_type'      => 'arum_machine',
    'posts_per_page' => 30,
    'post_status'    => 'publish',
    'meta_query'     => array(
    'relation'  => 'AND',
	$click_axis,
	$click_processing,
	$click_motor,
	$click_disk_type,

	$premilled_blank,
	$titanium_disk,
	$Wax,
	$peek,
	$wax,
	$zirconia,
	$nanocomposite,
	$lithium_disilicate,
	$Ni_Cr_Disk,
	$click_kw,

	$implant_bar,
	$screwretained_bridge,
	$customized_abutment,
	$hybrid_abutment,
	$inlay_onlay,
	$crown_coping,
	$crown_coping_bridge,
	$model,
	$bite_splint,
	$denture

)
); 


} 
 
	  


//echo '<pre>'; 
//print_r($query_args);  
 

/*
$query_args['meta_query'][] = array('key' => 'pre-milled_blank_titanium', 'value' => 'ea' , 'compare' => 'LIKE');
$query_args['meta_query'][] = array('key' => 'titanium_disk', 'value' => '1' , 'compare' => 'LIKE');
$query_args['meta_query'][] = array('key' => 'titanium_disk', 'value' => '2' , 'compare' => 'LIKE');

*/



	$result = new WP_Query( $query_args );
	if ( $result-> have_posts() ) :  
 
	 
	?> 

	<?php while ( $result->have_posts() ) : $result->the_post();
		$post_id=get_the_ID();

	$machine_page=get_field('machine_page', $post_id );
	//echo '<br>';
	//print_r($machine_page->ID);
	$machine_page_link=$machine_page->ID;

	 ?>
         <li><div class="customComparisonPage__compareMillingMachineModels__mainImg">
		<?php if (has_post_thumbnail( $post_id ) ):
		$image = wp_get_attachment_image_src( get_post_thumbnail_id( $post_id ), 'single-post-thumbnail' ); 
		?>  
		<img src="<?php echo $image[0]; ?>"> 

		<?php endif; ?>

         </div><!-- img --> 
         <h3><?php //echo data_exists($post_id,'pre-milled_blank_titanium','Pre-milled Blank (Titanium)'); ?></h3>
          
<h4><?php the_title(); ?></h4><a class="customComparisonPage__basicBtn ID-<?php echo $post_id; ?>" href="<?php echo get_permalink($machine_page_link); ?>">Learn More <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
          viewBox="0 0 11.18 19.75" style="enable-background:new 0 0 11.18 19.75;" xml:space="preserve">
          <style type="text/css">
          st0{fill:none;stroke:#F39F00;stroke-width:3.448;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}
          </style>
          <polyline class="st0" points="1.85,1.83 9.33,9.88 1.85,17.92 "/>
          </svg>
          </a>
      </li>
      <?php endwhile; else: ?>
      <h3>No Data Found! </h3> 

 	<?php  endif; wp_reset_postdata(); ?>  
	 
      </ul><!-- selected products -->

	
<?php die(); } 
 
add_action("wp_ajax_search_func", "search_func");
add_action("wp_ajax_nopriv_search_func", "search_func");



function data_exists($lpost_id,$key,$name) {

$check_val= get_post_meta($lpost_id, $key, true);

if($check_val){
		$val='<li data-id="'.$lpost_id.'"
		 data-val="'.$val.'" 
		 data-key="'.$key.'"
		 data-name="'.$name.'"
		 >
		 <span class="big--text element--block">
		 </span>'.$name.'</li>';

} else {

$val='';
}

return $val;


}
